tinytex::install_tinytex()
tinytex::parse_install(
text = "! LaTeX Error: File `lineno.sty' not found."
)
tinytex::parse_install("0main.log")
setwd("~/Trust/manuscript.Rnw")
tinytex::parse_install("0main.log")
tinytex::parse_install("0main.log")
pacman::p_load(readr, tidyverse, labelled, gtsummary, flextable,
modelsummary, here)
pacman::p_load(lme4)
pacman::p_load(readr,
tidyverse,
labelled,
gtsummary,
flextable,
modelsummary,
here,
lme4,
foreach,
parallel,
doSNOW,
tictoc)
# Access number of current job for use in seed setting
job_number = 1
method_type = "Par Boot"
B = 10
pacman::p_load(readr,
tidyverse,
labelled,
gtsummary,
flextable,
modelsummary,
here,
lme4,
foreach,
parallel,
doSNOW,
tictoc)
# Load other scripts ----
source(here("code", "For Cluster", "Trust_Analysis-Mediation_Analysis.R"))
# Load other scripts ----
source(here("code", "Trust_Analysis-Mediation_Analysis.R"))
# Load other scripts ----
source(here("code", "2.Trust_Analysis-Mediation_Analysis.R"))
source(here("code", "3.Trust_Analysis-Bootstrap_Replication.R"))
here("data","CleanDataFile-Trust-Nov102023.RData")
# Load Data ----
load(here("data","CleanDataFile-Trust-Nov102023.RData"))
detectCores() - 1
# Initialize Cluster ----
# n_cores = 5
n_cores = detectCores() - 1
# Initialize Cluster ----
n_cores = 25
# n_cores = detectCores() - 1
my_cluster = makeCluster(n_cores)
my_cluster
registerDoSNOW(cl = my_cluster)
clusterEvalQ(my_cluster,{
library(tibble)
library(lme4)
library(here)
source(here("code", "2.Trust_Analysis-Mediation_Analysis.R"))
source(here("code", "3.Trust_Analysis-Bootstrap_Replication.R"))
})
# Fit models to observed data ----
mod_Y = glmer(
q5.fc ~ q8.pcis + q4.src + q1.cc  + q2.dc + q3.pc +
age_group + gender + q7.la  + q9.edu +
(q8.pcis + q4.src | country),
data = dat.ma,
family = "binomial",
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 2e5))
)
install.packages("Matrix", type="source")
install.packages("Matrix", type = "source")
pacman::p_load(readr,
tidyverse,
labelled,
gtsummary,
flextable,
modelsummary,
here,
lme4,
foreach,
parallel,
doSNOW,
tictoc)
# Fit models to observed data ----
mod_Y = glmer(
q5.fc ~ q8.pcis + q4.src + q1.cc  + q2.dc + q3.pc +
age_group + gender + q7.la  + q9.edu +
(q8.pcis + q4.src | country),
data = dat.ma,
family = "binomial",
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 2e5))
)
mod_M  =  glmer(
q4.src ~ q8.pcis + q2.dc + q3.pc +
age_group + gender + q7.la +  q9.edu +
(q8.pcis | country),
data = dat.ma,
family = "binomial",
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 2e5))
)
## Pass some objects to worker processes
clusterExport(my_cluster, c("dat.ma", "mod_Y", "mod_M"))
# what does this function do
# it would be great if we have a session explaining ho to do parallel analysis in R
clusterEvalQ(my_cluster,{
library(tibble)
library(lme4)
library(here)
source(here("code", "2.Trust_Analysis-Mediation_Analysis.R"))
source(here("code", "3.Trust_Analysis-Bootstrap_Replication.R"))
})
# Access number of current job for use in seed setting
job_number = 1
method_type = "Par Boot"
B = 10
pacman::p_load(readr,
tidyverse,
labelled,
gtsummary,
flextable,
modelsummary,
here,
lme4,
foreach,
parallel,
doSNOW,
tictoc)
# Load other scripts ----
source(here("code", "2.Trust_Analysis-Mediation_Analysis.R"))
source(here("code", "3.Trust_Analysis-Bootstrap_Replication.R"))
# Load Data ----
load(here("data","CleanDataFile-Trust-Nov102023.RData"))
# Initialize Cluster ----
n_cores = 25
# n_cores = detectCores() - 1
my_cluster = makeCluster(n_cores)
registerDoSNOW(cl = my_cluster)
# what does this function do
# it would be great if we have a session explaining ho to do parallel analysis in R
clusterEvalQ(my_cluster,{
library(tibble)
library(lme4)
library(here)
source(here("code", "2.Trust_Analysis-Mediation_Analysis.R"))
source(here("code", "3.Trust_Analysis-Bootstrap_Replication.R"))
})
# Fit models to observed data ----
mod_Y = glmer(
q5.fc ~ q8.pcis + q4.src + q1.cc  + q2.dc + q3.pc +
age_group + gender + q7.la  + q9.edu +
(q8.pcis + q4.src | country),
data = dat.ma,
family = "binomial",
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 2e5))
)
mod_M  =  glmer(
q4.src ~ q8.pcis + q2.dc + q3.pc +
age_group + gender + q7.la +  q9.edu +
(q8.pcis | country),
data = dat.ma,
family = "binomial",
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 2e5))
)
## Pass some objects to worker processes
clusterExport(my_cluster, c("dat.ma", "mod_Y", "mod_M"))
tic()
# Run bootstrap analysis and consolidate output ----
boot_output = some_boot_analyses_par(dat.ma, mod_Y, mod_M, B, my_cluster, job_number)
boot_results = consolidate_bootstrap_output(boot_output)
cat("\n")
toc()
300/60
5*100/60
stopCluster(my_cluster)
# Access number of current job for use in seed setting
job_number = 1
method_type = "Par Boot"
B = 1280 # Total number of bootstrap replicates
pacman::p_load(readr,
tidyverse,
labelled,
gtsummary,
flextable,
modelsummary,
here,
lme4,
foreach,
parallel,
doSNOW,
tictoc)
# Load other scripts ----
source(here("code", "2.Trust_Analysis-Mediation_Analysis.R"))
source(here("code", "3.Trust_Analysis-Bootstrap_Replication.R"))
# Load Data ----
load(here("data","CleanDataFile-Trust-Nov102023.RData"))
# Initialize Cluster ----
n_cores = 25
# n_cores = detectCores() - 1
my_cluster = makeCluster(n_cores)
registerDoSNOW(cl = my_cluster)
# what does this function do
# it would be great if we have a session explaining ho to do parallel analysis in R
clusterEvalQ(my_cluster,{
library(tibble)
library(lme4)
library(here)
source(here("code", "2.Trust_Analysis-Mediation_Analysis.R"))
source(here("code", "3.Trust_Analysis-Bootstrap_Replication.R"))
})
# Fit models to observed data ----
mod_Y = glmer(
q5.fc ~ q8.pcis + q4.src + q1.cc  + q2.dc + q3.pc +
age_group + gender + q7.la  + q9.edu +
(q8.pcis + q4.src | country),
data = dat.ma,
family = "binomial",
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 2e5))
)
mod_M  =  glmer(
q4.src ~ q8.pcis + q2.dc + q3.pc +
age_group + gender + q7.la +  q9.edu +
(q8.pcis | country),
data = dat.ma,
family = "binomial",
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 2e5))
)
## Pass some objects to worker processes
clusterExport(my_cluster, c("dat.ma", "mod_Y", "mod_M"))
tic()
# Run bootstrap analysis and consolidate output ----
boot_output = some_boot_analyses_par(dat.ma, mod_Y, mod_M, B, my_cluster, job_number)
